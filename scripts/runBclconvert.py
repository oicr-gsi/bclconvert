import json
import csv
import os
import argparse
import re

parser = argparse.ArgumentParser(description='Postprocess bclconvert results.')
parser.add_argument('-r', '--run', help="Run name, needed to construct file names", required=True)
parser.add_argument('-l', '--list', help="List of Fastq files (generated by bclconvert)", required=True)
parser.add_argument('-d', '--demulti', help="Demultiplex stats file", required=True)
parser.add_argument('-f', '--fastq', help="Fastq files passed as array", required=True)
args = parser.parse_args()

report_fastq = args.list
report_demultiplex = args.demulti
seq_run = args.run
fastq_files = re.split(",", args.fastq)

samples = {}
with open(report_fastq, 'r') as f:
    reader = csv.DictReader(f, delimiter=",")
    for row in reader:
        sid = row['RGSM']
        R1 = row.get("Read1File", "")
        R2 = row.get("Read2File", "")
        lane = row['Lane']
        if sid not in samples:
            samples[sid] = {}
        if lane not in samples[sid]:
            samples[sid][lane] = {"R1": "", "R2": "", "read_count": 0}

        samples[sid][lane]["R1"] = os.path.basename(R1)
        samples[sid][lane]["R2"] = os.path.basename(R2)

f.close()

vettedSamples = {}


def link_rename(file, link_name):
    for fq in fastq_files:
        if os.path.basename(fq) == file:
            try:
                os.symlink(fq, link_name)
                return link_name
            except:
                print("Failed to symlink [" + os.path.basename(fq) + "]")
                return None


with open(report_demultiplex) as f:
    reader = csv.DictReader(f, delimiter=",")
    for row in reader:
        sid = row["SampleID"]
        lane = row["Lane"]
        barcodes = row["Index"]
        read_count = row["# Reads"]

        link = "_".join([sid, seq_run, lane, barcodes])

        if sid not in vettedSamples:
            vettedSamples[sid] = {}
        if lane not in vettedSamples[sid]:
            vettedSamples[sid][lane] = {"R1": link_rename(samples[sid][lane]["R1"], "_".join([link, "R1.fastq.gz"])),
                                        "R2": link_rename(samples[sid][lane]["R2"], "_".join([link, "R2.fastq.gz"])),
                                        "read_count": read_count}
output = {"fastqs": []}
for sid in vettedSamples:
    for lane in vettedSamples[sid]:
        read_count = vettedSamples[sid][lane]['read_count']
        if vettedSamples[sid][lane]['R1']:
            output["fastqs"].append({"left": vettedSamples[sid][lane]['R1'],
                                     "right": {"read_number": 1,
                                     "read_count": read_count}})
        if vettedSamples[sid][lane]['R2']:
            output["fastqs"].append({"left": vettedSamples[sid][lane]['R2'],
                                     "right": {"read_number": 2,
                                     "read_count": read_count}})

with open('outputs.json', "w") as f:
    json.dump(output, f)
f.close()
